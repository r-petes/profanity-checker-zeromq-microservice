import Configuration from './interfaces/IConfiguration';
/**
 * Profanity class.
 */
declare class Profanity {
    private phrase;
    private originalText?;
    private config?;
    private wordlist?;
    private censuredPhrase;
    /**
     * Profanity constructor.
     * @constructor
     * @param {string} inputStr - Input string to evaluate profanity.
     * @param {object} config - Profanity configurations.
     * @param {number} config.level - Level to replace placeHolder in profane words.
     * @param {boolean} config.saveOriginal - Define if the original input string will be saved.
     * @param {array} config.enabled - Define if the filter will be enabled.
     * @param {string} config.placeHolder - Character used to replace profane words.
     * @param {string} config.replaceRegex - Regular expression used to replace profane words with placeHolder.
     * @param {RegExp} config.separatorRegex - Regular expression used to split a string into words.
     * @param {Array} config.excludeWords - List of words to be ignored when filter profane words.
     * @param {Array} config.wordsList - List of words to be override the default dictionary of profane words.
     * @param {string} config.language - Language used to filter profane texts.
     */
    constructor(inputStr?: string, config?: Configuration);
    /**
     * Evaluate if string is profane.
     * @return Profanity instance
     * @private
     */
    private scan;
    /**
     * Censure a word with placeHolder characters.
     * @param {any} word - String to censure.
     * @public
     */
    censureWord(word: any): any;
    /**
     * Returns the string normalization from string sentence with diacritics.
     * @param str - Sentence to be normalized.
     * @return string normalized
     * @private
     */
    private normalizeText;
    /**
     * Evaluate if string is profanity and return an edited version.
     * @param {string} str - Sentence to filter (if sent it will overlap inputStr in constructor).
     * @return edited version
     * @public
     */
    censor(str?: string): string;
    /**
     * Evaluate if a string is a profane language.
     * @param {string} value - String to evaluate for profanity.
     * @return true or false
     * @public
     */
    isProfane(value: string): boolean | undefined;
    /**
     * Return original text if config.saveOrigial as true.
     * @return original version
     * @public
     */
    loadOriginal(): string | undefined;
    /**
     * Add word(s) to wordlist filter.
     * @param {...string} words - Word(s) to add to wordlist.
     * @public
     */
    addWords(...words: string[]): this;
    /**
     * Remove word(s) to wordlist filter.
     * @param {...string} words - Word(s) to be removed from wordlist.
     * @public
     */
    removeWords(...words: string[]): this;
}
export = Profanity;
